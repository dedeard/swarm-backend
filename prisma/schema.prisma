// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["swarm-agent", "swarm-company", "swarm-user", "swarm-rbac", "swarm-audit", "swarm-blog", "swarm-component", "swarm-cronjob", "swarm-file-storage", "swarm-legal", "swarm-llmstxt", "swarm-organization", "swarm-subscriptions", "swarm-team", "swarm-tool", "swarm-waitlist", "swarm-webhook", "swarm-workflow", "cache"]
}

// === USER-PERMISSION-CACHE ===
// From: prisma/schemas/cache/user-permission-cache.prisma

// === CACHE SCHEMA ===
// Permission cache for performance optimization

/// Permission cache for performance optimization
model UserPermissionCache {
  user_id         String   @db.Uuid /// User whose permissions are cached
  permission_name String /// Permission being cached
  has_permission  Boolean /// Whether user has the permission
  cached_at       DateTime @default(now()) @db.Timestamptz(6) /// When permission was cached
  expires_at      DateTime @default(dbgenerated("(NOW() + '00:15:00'::interval)")) @db.Timestamptz(6) /// Cache expiration time

  @@id([user_id, permission_name])
  @@index([expires_at], name: "idx_user_permission_cache_expiry")
  @@index([user_id], name: "idx_user_permission_cache_user_id")
  @@map("user_permission_cache")
  @@schema("cache")
}

// === AGENT-TEMPLATES ===
// From: prisma/schemas/swarm-agent/agent-templates.prisma

// === AGENT TEMPLATES SCHEMA ===
// Reusable agent templates and configurations

/// Reusable agent templates and configurations
model AgentTemplate {
  template_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category_id String?  @db.Uuid /// Template category
  name        String /// Template name
  description String? /// Template description
  settings    Json? /// Template configuration
  is_system   Boolean? @default(false) /// System-provided template
  is_public   Boolean? @default(false) /// Public visibility
  user_id     String?  @db.Uuid /// Template creator
  company_id  String?  @db.Uuid /// Associated company
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  category AgentCategory? @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  company  Company?       @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  agents   Agent[]
  prompts  AgentPrompt[]

  @@index([user_id], name: "idx_agent_templates_user_id")
  @@index([company_id], name: "idx_agent_templates_company_id")
  @@index([category_id], name: "idx_agent_templates_category_id")
  @@index([is_public], name: "idx_agent_templates_is_public")
  @@index([is_system], name: "idx_agent_templates_is_system")
  @@index([name], name: "idx_agent_templates_name")
  @@index([created_at], name: "idx_agent_templates_created_at")
  @@map("templates")
  @@schema("swarm-agent")
}

// === AGENT-PROMPTS ===
// From: prisma/schemas/swarm-agent/agent-prompts.prisma

// === AGENT PROMPTS SCHEMA ===
// Agent prompt templates and configurations

/// Agent prompt templates and configurations
model AgentPrompt {
  prompt_id   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category_id String?  @db.Uuid /// Prompt category
  template_id String?  @db.Uuid /// Associated template
  agent_id    String?  @db.Uuid /// Associated agent
  name        String /// Prompt name
  content     String /// Prompt content/text
  prompt_type String /// Type of prompt (system, user, etc.)
  is_system   Boolean? @default(false) /// System-provided prompt
  is_public   Boolean? @default(false) /// Public visibility
  is_visible  Boolean? @default(true) /// UI visibility
  position    Int? /// Display order
  user_id     String?  @db.Uuid /// Prompt creator
  company_id  String?  @db.Uuid /// Associated company
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  category AgentCategory? @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  template AgentTemplate? @relation(fields: [template_id], references: [template_id], onDelete: Cascade)
  agent    Agent?         @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)
  company  Company?       @relation(fields: [company_id], references: [company_id], onDelete: Cascade)

  @@index([user_id], name: "idx_agent_prompts_user_id")
  @@index([agent_id], name: "idx_agent_prompts_agent_id")
  @@index([template_id], name: "idx_agent_prompts_template_id")
  @@index([category_id], name: "idx_agent_prompts_category_id")
  @@index([company_id], name: "idx_agent_prompts_company_id")
  @@index([prompt_type], name: "idx_agent_prompts_type")
  @@index([is_public], name: "idx_agent_prompts_is_public")
  @@index([position], name: "idx_agent_prompts_position")
  @@map("prompts")
  @@schema("swarm-agent")
}

// === AGENT-CHAT-HISTORY ===
// From: prisma/schemas/swarm-agent/agent-chat-history.prisma

// === AGENT CHAT HISTORY SCHEMA ===
// Chat message history for agent conversations

/// Chat message history for agent conversations
model AgentChatHistory {
  chat_history_id    BigInt   @id @default(autoincrement()) /// Auto-increment ID for chat message ordering
  agent_log_id       String   @db.Uuid /// Reference to the agent log/conversation (now UUID)
  content            String /// Message content
  role               String /// Message role (user, agent, system)
  user_id            String?  @db.Uuid /// User who sent the message (if role=user)
  input_tokens       Int? /// Input tokens for this message
  output_tokens      Int? /// Output tokens for this message
  processing_time_ms Int? /// Processing time in milliseconds
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  metadata           Json? /// Additional message metadata

  // Relations
  agent_log AgentLog @relation("AgentLogChatMessages", fields: [agent_log_id], references: [agent_log_id], onDelete: Cascade)

  @@index([agent_log_id], name: "idx_chat_history_agent_log_id")
  @@index([role], name: "idx_chat_history_role")
  @@index([user_id], name: "idx_chat_history_user_id")
  @@index([created_at], name: "idx_chat_history_created_at")
  @@index([agent_log_id, created_at], name: "idx_chat_history_log_timestamp")
  @@map("chat_history")
  @@schema("swarm-agent")
}

// === AGENT-LOGS ===
// From: prisma/schemas/swarm-agent/agent-logs.prisma

// === AGENT LOGS SCHEMA ===
// Agent usage and token consumption logs with normalized chat history

/// Agent usage and token consumption logs
model AgentLog {
  agent_log_id    String   @id @default(uuid()) @db.Uuid /// Secure UUID instead of predictable auto-increment
  agent_id        String   @db.Uuid /// Agent that was used
  user_id         String?  @db.Uuid /// User who used the agent
  company_id      String?  @db.Uuid /// Company context
  session_title   String?  @db.VarChar(255) /// Human-readable title for this conversation
  input_token     Int? /// Input tokens consumed
  output_token    Int? /// Output tokens consumed
  embedding_token Int? /// Embedding tokens consumed
  pricing         Decimal? @db.Decimal /// Cost calculation
  created_at      DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  agent         Agent?             @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)
  company       Company?           @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  chat_messages AgentChatHistory[] @relation("AgentLogChatMessages") /// Chat messages in this conversation

  @@index([agent_id], name: "idx_agent_logs_agent_id")
  @@index([user_id], name: "idx_agent_logs_user_id")
  @@index([company_id], name: "idx_agent_logs_company_id")
  @@index([created_at], name: "idx_agent_logs_created_at")
  @@index([agent_id, created_at], name: "idx_agent_logs_agent_timestamp")
  @@map("logs")
  @@schema("swarm-agent")
}

// === AGENT-CATEGORIES ===
// From: prisma/schemas/swarm-agent/agent-categories.prisma

// === AGENT CATEGORIES SCHEMA ===
// Agent categorization and classification system

/// Agent category classification system
model AgentCategory {
  category_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  metadata    Json?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  agents    Agent[]
  templates AgentTemplate[]
  prompts   AgentPrompt[]

  @@map("categories")
  @@schema("swarm-agent")
}

// === AGENT-BUCKET-ACCESSES ===
// From: prisma/schemas/swarm-agent/agent-bucket-accesses.prisma

// === AGENT BUCKET ACCESS SCHEMA ===
// Mapping of agent-to-bucket access rights with permission levels.

/// Intermediate table for access control between agents and buckets
model AgentBucketAccess {
  agent_id         String   @db.Uuid
  bucket_id        String
  permission_level String
  granted_at       DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  agent  Agent  @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)
  bucket Bucket @relation(fields: [bucket_id], references: [bucket_id], onDelete: Cascade)

  @@id([agent_id, bucket_id])
  @@map("agent_bucket_accesses")
  @@schema("swarm-agent")
}

// === AGENT-RELATIONSHIPS ===
// From: prisma/schemas/swarm-agent/agent-relationships.prisma

// === AGENT RELATIONSHIPS SCHEMA ===
// Agent sharing and tool associations

/// Agent sharing with individual users
model AgentShareUser {
  agent_id            String   @db.Uuid
  shared_with_user_id String   @db.Uuid
  permission_level    String   @default("read")
  granted_at          DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  agent Agent @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)

  @@id([agent_id, shared_with_user_id])
  @@map("shares_users")
  @@schema("swarm-agent")
}

/// Agent-tool associations for tool usage
model AgentTool {
  agent_id String @db.Uuid
  tool_id  String @db.Uuid

  // Relations
  agent Agent @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)
  tool  Tool  @relation(fields: [tool_id], references: [tool_id], onDelete: Cascade)

  @@id([agent_id, tool_id])
  @@map("agent_tools")
  @@schema("swarm-agent")
}

// === AGENTS ===
// From: prisma/schemas/swarm-agent/agents.prisma

// === AGENT SCHEMA ===
// AI agent entity with multi-tenant support and rich configuration

/// AI agent entity with multi-tenant support and rich configuration
model Agent {
  agent_id      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?   @db.Uuid /// Owner user ID
  company_id    String?   @db.Uuid /// Associated company for multi-tenancy
  agent_name    String /// Agent display name
  description   String? /// Agent description and purpose
  route_path    String? /// API route path for agent access
  agent_style   String? /// Agent personality/style configuration
  on_status     Boolean? /// Agent active/inactive status
  created_at    DateTime? @default(now()) @db.Timestamptz(6) /// Creation timestamp
  public_hash   String? /// Public access hash for sharing
  is_public     Boolean? /// Public visibility flag
  avatar_url    String? /// Agent avatar image URL
  category_id   String?   @db.Uuid /// Agent category classification
  template_id   String?   @db.Uuid /// Base template used
  workflow_id   String?   @db.Uuid /// Associated workflow
  use_memory    Boolean?  @default(false) /// Memory/context retention enabled
  media_input   Json? /// Supported input media types
  media_output  Json? /// Supported output media types
  use_tool      Boolean?  @default(false) /// Tool usage enabled
  model_default String? /// Default AI model to use

  // Relations
  company  Company?       @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  category AgentCategory? @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  template AgentTemplate? @relation(fields: [template_id], references: [template_id], onDelete: Cascade)

  // Agent relationships
  agent_logs             AgentLog[]
  agent_prompts          AgentPrompt[]
  agent_shares           AgentShareUser[]
  agent_tools            AgentTool[]
  agent_llmstxt          AgentLlmstxt[]
  component_associations ComponentAgentAssociation[]
  team_members           TeamMember[]
  agent_bucket_accesses  AgentBucketAccess[]

  @@index([user_id], name: "idx_agents_user_id")
  @@index([company_id], name: "idx_agents_company_id")
  @@index([is_public], name: "idx_agents_is_public")
  @@index([category_id], name: "idx_agents_category_id")
  @@index([created_at], name: "idx_agents_created_at")
  @@index([company_id, is_public], name: "idx_agents_company_public")
  @@index([agent_name], name: "idx_agents_name")
  @@index([on_status], name: "idx_agents_status")
  @@map("agents")
  @@schema("swarm-agent")
}

// === RATE-LIMIT-LOGS ===
// From: prisma/schemas/swarm-audit/rate-limit-logs.prisma

// === RATE LIMIT LOGS SCHEMA ===
// Rate limiting tracking and error monitoring

/// Rate limiting tracking for API calls
model RateLimitLog {
  user_id        String   @db.Uuid /// User making the call
  function_name  String /// Function being called
  call_timestamp DateTime @default(now()) @db.Timestamptz(6) /// When the call was made
  client_info    Json? /// Client information

  @@id([user_id, function_name, call_timestamp])
  @@index([user_id, function_name, call_timestamp], name: "idx_rate_limit_log_user_function_time")
  @@map("rate_limit_log")
  @@schema("swarm-audit")
}

/// Error tracking and monitoring for system reliability
model ErrorLog {
  error_id      BigInt    @id @default(autoincrement())
  user_id       String?   @db.Uuid /// User associated with the error
  function_name String /// Function where error occurred
  error_code    String /// Error code or type
  error_message String /// Error message description
  error_context Json? /// Additional error context
  stack_trace   String? /// Full stack trace for debugging
  occurred_at   DateTime  @default(now()) @db.Timestamptz(6) /// When error occurred
  resolved_at   DateTime? @db.Timestamptz(6) /// When error was resolved
  severity      String?   @default("ERROR") /// Error severity level

  @@index([function_name, occurred_at], name: "idx_error_log_function_time")
  @@index([severity, occurred_at], name: "idx_error_log_severity_time")
  @@index([user_id], name: "idx_error_log_user_id")
  @@index([error_code], name: "idx_error_log_error_code")
  @@index([occurred_at], name: "idx_error_log_occurred_at")
  @@map("error_log")
  @@schema("swarm-audit")
}

// === AUDIT-LOGS ===
// From: prisma/schemas/swarm-audit/audit-logs.prisma

// === AUDIT LOGS SCHEMA ===
// System audit logging and monitoring

/// Main audit log for system actions
model AuditLog {
  log_id              BigInt   @id @default(autoincrement())
  user_id             String?  @db.Uuid
  action_timestamp    DateTime @default(now()) @db.Timestamptz(6)
  action_type         String
  table_name_affected String?
  row_id_affected     String?
  old_data_snapshot   Json?
  new_data_snapshot   Json?
  description         String?
  client_info         Json?

  @@map("audit_log")
  @@schema("swarm-audit")
}

/// Partitioned audit log for high-volume audit data
model AuditLogPartitioned {
  log_id              BigInt   @default(autoincrement())
  user_id             String?  @db.Uuid /// User performing the action
  action_type         String /// Type of action performed
  table_name_affected String? /// Table that was modified
  row_id_affected     String? /// Specific row that was affected
  old_data_snapshot   Json? /// Data before the change
  new_data_snapshot   Json? /// Data after the change
  description         String? /// Human-readable description
  client_info         Json? /// Client/browser information
  action_timestamp    DateTime @default(now()) @db.Timestamptz(6) /// When the action occurred

  @@id([log_id, action_timestamp])
  @@index([user_id, action_timestamp], name: "idx_audit_log_partitioned_user_timestamp")
  @@index([action_type, action_timestamp], name: "idx_audit_log_partitioned_action_type")
  @@index([table_name_affected, action_timestamp], name: "idx_audit_log_partitioned_table_name")
  @@map("audit_log_partitioned")
  @@schema("swarm-audit")
}

// === FUNCTION-ACCESS-LOGS ===
// From: prisma/schemas/swarm-audit/function-access-logs.prisma

// === FUNCTION ACCESS LOGS SCHEMA ===
// Function access audit log for security monitoring

/// Function access audit log for security monitoring
model FunctionAccessLog {
  log_id           BigInt   @id @default(autoincrement())
  user_id          String?  @db.Uuid /// User attempting access
  function_name    String /// Function being accessed
  access_granted   Boolean /// Whether access was granted
  access_timestamp DateTime @default(now()) @db.Timestamptz(6) /// When access was attempted
  user_role        String? /// User's role at time of access
  reason           String? /// Reason for access denial (if applicable)

  @@index([user_id], name: "idx_function_access_log_user_id")
  @@index([function_name], name: "idx_function_access_log_function_name")
  @@index([access_timestamp], name: "idx_function_access_log_timestamp")
  @@index([access_granted], name: "idx_function_access_log_granted")
  @@index([user_id, access_timestamp], name: "idx_function_access_log_user_timestamp")
  @@map("function_access_log")
  @@schema("swarm-audit")
}

// === BLOG-CATEGORIES ===
// From: prisma/schemas/swarm-blog/blog-categories.prisma

// === BLOG CATEGORIES SCHEMA ===
// Blog content categorization system

/// Blog content categorization system
model BlogCategory {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String /// Category display name
  slug        String   @unique /// URL-friendly identifier
  description String? /// Category description
  color       String? /// UI color theme
  is_active   Boolean? @default(true) /// Active status
  sort_order  Int?     @default(0) /// Display order
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  blog_articles BlogArticle[]

  @@index([is_active], name: "idx_blog_categories_active")
  @@index([sort_order], name: "idx_blog_categories_sort_order")
  @@index([slug], name: "idx_blog_categories_slug")
  @@map("blog_categories")
  @@schema("swarm-blog")
}

// === BLOG-LANGUAGES-AND-TAGS ===
// From: prisma/schemas/swarm-blog/blog-languages-and-tags.prisma

// === BLOG LANGUAGES AND TAGS SCHEMA ===
// Supported languages and tagging system for blog content

/// Supported languages for multi-language content
model SupportedLanguage {
  code        String   @id /// ISO language code
  name        String /// English language name
  native_name String /// Native language name
  is_active   Boolean? @default(true) /// Language availability
  sort_order  Int?     @default(0) /// Display order
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  article_translations BlogArticleTranslation[]
  audio_files          BlogAudioFile[]

  @@index([is_active], name: "idx_supported_languages_active")
  @@index([sort_order], name: "idx_supported_languages_sort_order")
  @@map("supported_languages")
  @@schema("swarm-blog")
}

/// Blog tagging system
model BlogTag {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String /// Tag display name
  slug        String   @unique /// URL-friendly identifier
  description String? /// Tag description
  color       String? /// UI color theme
  usage_count Int?     @default(0) /// Usage frequency counter
  is_active   Boolean? @default(true) /// Active status
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  article_tags BlogArticleTag[]

  @@index([is_active], name: "idx_blog_tags_active")
  @@index([usage_count], name: "idx_blog_tags_usage_count")
  @@index([slug], name: "idx_blog_tags_slug")
  @@index([name], name: "idx_blog_tags_name")
  @@map("blog_tags")
  @@schema("swarm-blog")
}

/// Junction table for flexible tagging system between articles and tags
model BlogArticleTag {
  article_id String   @db.Uuid /// Reference to the blog article
  tag_id     String   @db.Uuid /// Reference to the blog tag
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  article BlogArticle @relation(fields: [article_id], references: [id], onDelete: Cascade)
  tag     BlogTag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([article_id, tag_id])
  @@index([tag_id], name: "idx_blog_article_tags_tag")
  @@index([created_at], name: "idx_blog_article_tags_created")
  @@map("blog_article_tags")
  @@schema("swarm-blog")
}

// === BLOG-ARTICLES ===
// From: prisma/schemas/swarm-blog/blog-articles.prisma

// === BLOG ARTICLES SCHEMA ===
// Blog articles with SEO and multi-language support

/// Blog articles with SEO and multi-language support
model BlogArticle {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String /// Article title
  slug               String    @unique /// URL-friendly identifier
  content            String /// Article content (markdown)
  excerpt            String? /// Article summary
  featured_image_url String? /// Featured image URL
  meta_description   String? /// SEO meta description
  meta_keywords      String[] /// SEO keywords
  status             String    @default("draft") /// Publication status
  publish_date       DateTime? @db.Timestamptz(6) /// Publication date
  author_user_id     String    @db.Uuid /// Article author
  category_id        String?   @db.Uuid /// Article category
  view_count         Int?      @default(0) /// View counter
  is_featured        Boolean?  @default(false) /// Featured article flag
  has_audio          Boolean?  @default(false) /// Audio content available
  source_language    String?   @default("en") /// Original language
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  category     BlogCategory?            @relation(fields: [category_id], references: [id])
  translations BlogArticleTranslation[]
  audio_files  BlogAudioFile[]
  article_tags BlogArticleTag[]

  @@index([status], name: "idx_blog_articles_status")
  @@index([publish_date], name: "idx_blog_articles_publish_date")
  @@index([author_user_id], name: "idx_blog_articles_author")
  @@index([category_id], name: "idx_blog_articles_category_id")
  @@index([slug], name: "idx_blog_articles_slug")
  @@index([is_featured], name: "idx_blog_articles_featured")
  @@index([view_count], name: "idx_blog_articles_view_count")
  @@index([created_at], name: "idx_blog_articles_created_at")
  @@map("blog_articles")
  @@schema("swarm-blog")
}

// === BLOG-TRANSLATIONS-AND-AUDIO ===
// From: prisma/schemas/swarm-blog/blog-translations-and-audio.prisma

// === BLOG TRANSLATIONS AND AUDIO SCHEMA ===
// Blog article translations and audio content

/// Blog article translations for multi-language support
model BlogArticleTranslation {
  id                        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  article_id                String   @db.Uuid /// Reference to the original blog article
  language_code             String /// Target language for this translation
  title                     String /// Translated title
  content                   String /// Translated content
  excerpt                   String? /// Translated excerpt
  meta_description          String? /// Translated SEO meta description
  meta_keywords             String[] /// Translated SEO keywords
  slug                      String /// URL-friendly identifier for translated article
  translation_status        String   @default("draft") /// Current status of the translation
  translation_quality_score Int? /// Quality score from 0-100
  translator_user_id        String?  @db.Uuid /// User who created/managed this translation
  created_at                DateTime @default(now()) @db.Timestamptz(6)
  updated_at                DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // Relations
  article  BlogArticle       @relation(fields: [article_id], references: [id], onDelete: Cascade)
  language SupportedLanguage @relation(fields: [language_code], references: [code])

  @@unique([article_id, language_code])
  @@unique([language_code, slug])
  @@index([translation_status], name: "idx_blog_article_translations_status")
  @@index([language_code], name: "idx_blog_article_translations_language")
  @@index([translator_user_id], name: "idx_blog_article_translations_translator")
  @@map("blog_article_translations")
  @@schema("swarm-blog")
}

/// Blog audio files for audio content integration
model BlogAudioFile {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  article_id       String   @db.Uuid /// Reference to the blog article
  language_code    String? /// Language of the audio content
  file_url         String /// URL to the audio file in storage
  file_size_bytes  BigInt? /// File size in bytes
  duration_seconds Int? /// Duration of audio in seconds
  audio_format     String? /// Audio format (mp3, wav, ogg, etc.)
  transcript       String? /// Text transcript of the audio content
  narrator_name    String? /// Name of the narrator
  audio_quality    String   @default("standard") /// Audio quality level
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // Relations
  article  BlogArticle        @relation(fields: [article_id], references: [id], onDelete: Cascade)
  language SupportedLanguage? @relation(fields: [language_code], references: [code])

  @@index([article_id], name: "idx_blog_audio_files_article")
  @@index([language_code], name: "idx_blog_audio_files_language")
  @@index([audio_quality], name: "idx_blog_audio_files_quality")
  @@map("blog_audio_files")
  @@schema("swarm-blog")
}

// === USER-COMPANIES ===
// From: prisma/schemas/swarm-company/user-companies.prisma

// === USER-COMPANY RELATIONSHIPS ===
// User-company membership with role-based access

/// User-company membership with role-based access
model UserCompany {
  user_id    String  @db.Uuid /// User identifier
  company_id String  @db.Uuid /// Company identifier
  role_id    String? @db.Uuid /// User's role within the company

  // Relations
  company Company @relation(fields: [company_id], references: [company_id], onDelete: Restrict)
  role    Role?   @relation(fields: [role_id], references: [role_id])

  @@id([user_id, company_id])
  @@index([user_id], name: "idx_user_companies_user_id")
  @@index([company_id], name: "idx_user_companies_company_id")
  @@index([role_id], name: "idx_user_companies_role_id")
  @@index([user_id, company_id], name: "idx_user_companies_composite")
  @@map("user_companies")
  @@schema("swarm-company")
}

// === COMPANIES ===
// From: prisma/schemas/swarm-company/companies.prisma

// === COMPANY SCHEMA ===
// Multi-tenant company entity with comprehensive business information

/// Multi-tenant company entity with comprehensive business information
model Company {
  company_id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String    @unique /// Company display name (must be unique)
  statutory_name      String? /// Legal company name
  description         String? /// Company description
  address             String? /// Physical address
  city                String? /// City location
  state_province      String? /// State or province
  postal_code         String? /// ZIP/postal code
  country             String? /// Country code or name
  phone               String? /// Contact phone number
  email               String? /// Contact email address
  website             String? /// Company website URL
  website_url         String? /// Alternative website URL
  social_accounts     Json? /// Social media account links
  chamber_of_commerce String? /// Chamber of commerce registration
  duns_number         String? /// DUNS business identifier
  tax_id              String? /// Tax identification number
  industry            String? /// Industry classification
  founded_date        DateTime? @db.Date /// Company founding date
  company_size        String? /// Employee count category
  logo_url            String? /// Company logo URL
  created_at          DateTime  @default(now()) @db.Timestamptz(6) /// Record creation timestamp
  updated_at          DateTime  @default(now()) @db.Timestamptz(6) /// Last update timestamp

  // Relations
  agents                           Agent[]
  agent_logs                       AgentLog[]
  agent_templates                  AgentTemplate[]
  agent_prompts                    AgentPrompt[]
  user_companies                   UserCompany[]
  buckets                          Bucket[]
  components                       Component[]
  component_shares                 ComponentShareCompanyRole[]
  teams                            Team[]
  organizations                    Organization[]
  cron_jobs                        CronJob[]
  outgoing_webhooks                OutgoingWebhook[]
  workflows                        Workflow[]
  webhooks                         Webhook[]
  file_metadata                    FileMetadata[]
  file_shares_company_roles        FileShareCompanyRole[]
  tools                            Tool[]
  tool_secret_shares_company_roles ToolSecretShareCompanyRole[]
  postgresql_user_roles            PostgresqlUserRole[]

  @@index([name], name: "idx_companies_name")
  @@index([created_at], name: "idx_companies_created_at")
  @@index([industry], name: "idx_companies_industry")
  @@index([country], name: "idx_companies_country")
  @@map("companies")
  @@schema("swarm-company")
}

// === COMPONENT-RELATIONSHIPS ===
// From: prisma/schemas/swarm-component/component-relationships.prisma

// === COMPONENT RELATIONSHIPS SCHEMA ===
// Component associations, sharing, and versioning

/// Component-Agent associations
model ComponentAgentAssociation {
  association_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  component_id   String?  @db.Uuid
  agent_id       String?  @db.Uuid
  created_at     DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  updated_at     DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)

  // Relations
  component Component? @relation(fields: [component_id], references: [component_id], onDelete: Cascade)
  agent     Agent?     @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)

  @@unique([component_id, agent_id])
  @@map("component_agent_associations")
  @@schema("swarm-component")
}

/// Component sharing with individual users
model ComponentShareUser {
  share_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  component_id     String?  @db.Uuid
  user_id          String?  @db.Uuid
  permission_level String
  created_at       DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  updated_at       DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)

  // Relations
  component Component? @relation(fields: [component_id], references: [component_id], onDelete: Cascade)

  @@unique([component_id, user_id])
  @@map("component_shares_users")
  @@schema("swarm-component")
}

/// Component sharing with company roles
model ComponentShareCompanyRole {
  share_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  component_id     String?  @db.Uuid
  company_id       String?  @db.Uuid
  role_id          String?  @db.Uuid
  permission_level String
  created_at       DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  updated_at       DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)

  // Relations
  component Component? @relation(fields: [component_id], references: [component_id], onDelete: Cascade)
  company   Company?   @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  role      Role?      @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@unique([component_id, company_id, role_id])
  @@map("component_shares_company_roles")
  @@schema("swarm-component")
}

/// Component version management
model ComponentVersion {
  version_id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  component_id     String?  @db.Uuid
  version_number   String
  changelog        String?
  package_url      String?
  version_metadata Json?
  is_latest        Boolean? @default(false)
  is_stable        Boolean? @default(false)
  created_at       DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  updated_at       DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)

  // Relations
  component Component? @relation(fields: [component_id], references: [component_id], onDelete: Cascade)

  @@unique([component_id, version_number])
  @@map("component_versions")
  @@schema("swarm-component")
}

// === COMPONENT-TYPES ===
// From: prisma/schemas/swarm-component/component-types.prisma

// === COMPONENT TYPES SCHEMA ===
// Component type definitions and categorization

/// Component type definitions
model ComponentType {
  type_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  description String?
  created_at  DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  updated_at  DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)

  // Relations
  components Component[]

  @@map("component_types")
  @@schema("swarm-component")
}

// === COMPONENTS ===
// From: prisma/schemas/swarm-component/components.prisma

// === COMPONENTS SCHEMA ===
// Main component definitions and metadata

/// Main component entity with metadata and relationships
model Component {
  component_id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source_id           String?  @db.Uuid
  type_id             String?  @db.Uuid
  company_id          String?  @db.Uuid
  name                String   @unique
  display_name        String?
  description         String?
  category            String?
  component_type      String?
  package_url         String?
  storybook_metadata  Json?
  additional_metadata Json?
  is_public           Boolean? @default(false)
  is_active           Boolean? @default(true)
  created_at          DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  updated_at          DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)

  // Relations
  source               ComponentSource?            @relation(fields: [source_id], references: [source_id], onDelete: Cascade)
  type                 ComponentType?              @relation(fields: [type_id], references: [type_id], onDelete: Cascade)
  company              Company?                    @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  agent_associations   ComponentAgentAssociation[]
  shares_users         ComponentShareUser[]
  shares_company_roles ComponentShareCompanyRole[]
  versions             ComponentVersion[]

  @@map("components")
  @@schema("swarm-component")
}

// === COMPONENT-SOURCES ===
// From: prisma/schemas/swarm-component/component-sources.prisma

// === COMPONENT SOURCES SCHEMA ===
// Component source management and metadata

/// Component source definitions
model ComponentSource {
  source_id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  description String?
  created_at  DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  updated_at  DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)

  // Relations
  components Component[]

  @@map("component_sources")
  @@schema("swarm-component")
}

// === CRON-JOBS ===
// From: prisma/schemas/swarm-cronjob/cron-jobs.prisma

// === CRON JOBS SCHEMA ===
// Scheduled job management and automation

/// Scheduled cron job management
model CronJob {
  cron_job_id String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String    @db.Uuid
  company_id  String?   @db.Uuid
  name        String
  schedule    String
  target_type String
  target_id   String?   @db.Uuid
  enabled     Boolean?  @default(true)
  next_run    DateTime? @db.Timestamptz(6)
  last_run    DateTime? @db.Timestamptz(6)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  company Company? @relation(fields: [company_id], references: [company_id], onDelete: Cascade)

  @@map("cron_jobs")
  @@schema("swarm-cronjob")
}

// === FILE-METADATA ===
// From: prisma/schemas/swarm-file-storage/file-metadata.prisma

// === FILE METADATA SCHEMA ===
// File metadata and storage information

/// File metadata and storage information
model FileMetadata {
  file_id        String    @id @db.Uuid
  bucket_id      String /// Storage bucket identifier
  object_path    String /// File path within bucket
  owner_user_id  String    @db.Uuid /// File owner
  company_id     String?   @db.Uuid /// Associated company
  file_name      String? /// Original filename
  content_type   String? /// MIME content type
  size_bytes     BigInt? /// File size in bytes
  is_public      Boolean?  @default(false) /// Public access flag
  need_embedding Boolean /// Embedding file (RAG, need file processing service) or Normal file
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  metadata       Json? /// Additional file metadata

  // Relations
  bucket                    Bucket?                @relation(fields: [bucket_id], references: [bucket_id], onDelete: Cascade)
  owner                     UserProfile            @relation(fields: [owner_user_id], references: [user_id])
  company                   Company?               @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  file_shares_users         FileShareUser[]
  file_shares_company_roles FileShareCompanyRole[]
  file_embeddings           FileEmbedding[]

  @@unique([bucket_id, object_path])
  @@index([owner_user_id], name: "idx_file_metadata_user_id")
  @@index([bucket_id], name: "idx_file_metadata_bucket_id")
  @@index([company_id], name: "idx_file_metadata_company_id")
  @@index([created_at], name: "idx_file_metadata_created_at")
  @@index([content_type], name: "idx_file_metadata_content_type")
  @@index([is_public], name: "idx_file_metadata_is_public")
  @@map("file_metadata")
  @@schema("swarm-file-storage")
}

// === BUCKETS ===
// From: prisma/schemas/swarm-file-storage/buckets.prisma

// === BUCKETS SCHEMA ===
// Storage bucket management and organization

/// Storage bucket definitions
model Bucket {
  bucket_id             String   @id
  owner_user_id         String   @db.Uuid
  associated_company_id String?  @db.Uuid
  description           String?
  is_public             Boolean? @default(false)
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  metadata              Json?

  // Relations
  owner                 UserProfile         @relation(fields: [owner_user_id], references: [user_id])
  associated_company    Company?            @relation(fields: [associated_company_id], references: [company_id], onDelete: Cascade)
  agent_bucket_accesses AgentBucketAccess[]
  file_metadata         FileMetadata[]

  @@map("buckets")
  @@schema("swarm-file-storage")
}

// === FILE-SHARING ===
// From: prisma/schemas/swarm-file-storage/file-sharing.prisma

// === FILE SHARING SCHEMA ===
// File sharing permissions and access control

/// File sharing with individual users
model FileShareUser {
  file_id             String   @db.Uuid
  shared_with_user_id String   @db.Uuid
  permission_level    String   @default("read")
  granted_at          DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  shared_user   UserProfile  @relation(fields: [shared_with_user_id], references: [user_id], onDelete: Cascade)
  file_metadata FileMetadata @relation(fields: [file_id], references: [file_id], onDelete: Cascade)

  @@id([file_id, shared_with_user_id])
  @@map("file_shares_users")
  @@schema("swarm-file-storage")
}

/// File sharing with company roles
model FileShareCompanyRole {
  file_id                String   @db.Uuid
  shared_with_company_id String   @db.Uuid
  shared_with_role_id    String   @db.Uuid
  permission_level       String   @default("read")
  granted_at             DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  file_metadata FileMetadata @relation(fields: [file_id], references: [file_id], onDelete: Cascade)
  company       Company      @relation(fields: [shared_with_company_id], references: [company_id], onDelete: Cascade)
  role          Role         @relation(fields: [shared_with_role_id], references: [role_id], onDelete: Cascade)

  @@id([file_id, shared_with_company_id, shared_with_role_id, permission_level])
  @@map("file_shares_company_roles")
  @@schema("swarm-file-storage")
}

// === FILE-EMBEDDINGS ===
// From: prisma/schemas/swarm-file-storage/file-embeddings.prisma

// === FILE EMBEDDINGS SCHEMA ===
// Vector embeddings for semantic file search

/// Vector embeddings for semantic file search
model FileEmbedding {
  id          String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  file_id     String                       @default(dbgenerated("uuid_generate_v4()")) @db.Uuid /// Source file
  chunk_index Int                          @db.SmallInt /// Chunk sequence number
  content     String /// Text content of the chunk
  embedding   Unsupported("vector(1536)")? /// Vector embedding for semantic search
  created_at  DateTime                     @default(now()) @db.Timestamptz(6)
  metadata    Json? /// Additional chunk metadata

  // Relations
  file_metadata FileMetadata? @relation(fields: [file_id], references: [file_id], onDelete: Cascade)

  @@index([file_id], name: "idx_file_embeddings_file_id")
  @@index([created_at], name: "idx_file_embeddings_created_at")
  @@map("file_embeddings")
  @@schema("swarm-file-storage")
}

// === TERMS-AND-CONDITIONS ===
// From: prisma/schemas/swarm-legal/terms-and-conditions.prisma

// === TERMS AND CONDITIONS SCHEMA ===
// Legal terms and conditions management

/// Terms and conditions versioning and management
model TermsAndCondition {
  term_id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  version          String
  language         String
  content_markdown String
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  valid_from       DateTime  @db.Timestamptz(6)
  valid_until      DateTime? @db.Timestamptz(6)

  // Relations
  pricing_tiers PricingTier[]

  @@map("terms_and_conditions")
  @@schema("swarm-legal")
}

// === PRIVACY-POLICIES ===
// From: prisma/schemas/swarm-legal/privacy-policies.prisma

// === PRIVACY POLICIES SCHEMA ===
// Privacy policy versioning and management

/// Privacy policy versioning and management
model PrivacyPolicy {
  policy_id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  version          String
  language         String
  content_markdown String
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  valid_from       DateTime  @db.Timestamptz(6)
  valid_until      DateTime? @db.Timestamptz(6)

  // Relations
  pricing_tiers PricingTier[]

  @@map("privacy_policies")
  @@schema("swarm-legal")
}

/// Policy version management for rollback and audit
model PolicyVersion {
  version_id  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  version     Int      @default(1)
  description String?
  created_by  String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  is_active   Boolean  @default(false)
  policies    Json // Backup of policies for this version

  @@map("policy_versions")
  @@schema("swarm-legal")
}

// === LLMSTXT-REGISTRY ===
// From: prisma/schemas/swarm-llmstxt/llmstxt-registry.prisma

// === LLMSTXT REGISTRY SCHEMA ===
// LLMsTxt documentation registry for agent context

/// LLMsTxt documentation registry for agent context
model LlmstxtRegistry {
  llmstxt_id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?  @db.Uuid /// Registry owner
  company_id   String?  @db.Uuid /// Associated company
  name         String /// Document name
  description  String? /// Document description
  source_url   String? /// Original source URL
  type         String   @default("basic") /// Document type
  relative_url String /// Relative path to document
  file_size    BigInt? /// Document size in bytes
  file_hash    String? /// Content hash for integrity
  metadata     Json?    @default("{}") /// Additional metadata
  tags         String[] @default([]) /// Document tags
  version      String?  @default("1.0") /// Document version
  is_active    Boolean? @default(true) /// Active status
  is_public    Boolean? @default(false) /// Public visibility
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  agent_llmstxt AgentLlmstxt[]

  @@index([user_id], name: "idx_llmstxt_registry_user_id")
  @@index([company_id], name: "idx_llmstxt_registry_company_id")
  @@index([is_public], name: "idx_llmstxt_registry_is_public")
  @@index([is_active], name: "idx_llmstxt_registry_is_active")
  @@index([type], name: "idx_llmstxt_registry_type")
  @@index([name], name: "idx_llmstxt_registry_name")
  @@index([tags], name: "idx_llmstxt_registry_tags")
  @@map("llmstxt_registry")
  @@schema("swarm-llmstxt")
}

/// Agent-LLMsTxt associations
model AgentLlmstxt {
  agent_id    String   @db.Uuid
  llmstxt_id  String   @db.Uuid
  priority    Int?     @default(0)
  is_required Boolean? @default(false)
  usage_type  String?  @default("context")
  metadata    Json?    @default("{}")
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  agent   Agent           @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)
  llmstxt LlmstxtRegistry @relation(fields: [llmstxt_id], references: [llmstxt_id], onDelete: Cascade)

  @@id([agent_id, llmstxt_id])
  @@map("llmstxt")
  @@schema("swarm-llmstxt")
}

// === ORGANIZATIONS ===
// From: prisma/schemas/swarm-organization/organizations.prisma

// === ORGANIZATIONS SCHEMA ===
// Organization management and structure

/// Organization entity for higher-level grouping
model Organization {
  organization_id   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String   @db.Uuid
  company_id        String?  @db.Uuid
  template_id       String?  @db.Uuid
  workflow_id       String?  @db.Uuid
  organization_name String
  description       String?
  metadata          Json?
  is_public         Boolean? @default(false)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  company Company? @relation(fields: [company_id], references: [company_id], onDelete: Cascade)

  @@map("organizations")
  @@schema("swarm-organization")
}

// === POSTGRESQL-USER-ROLES ===
// From: prisma/schemas/swarm-rbac/postgresql-user-roles.prisma

// === POSTGRESQL USER ROLES SCHEMA ===
// Tracks PostgreSQL role assignments for users with audit trail

/// PostgreSQL role assignments for users
model PostgresqlUserRole {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String   @db.Uuid /// User who has the role assigned
  postgresql_role String /// PostgreSQL role name (swarm_user, swarm_admin, etc.)
  company_id      String?  @db.Uuid /// Company context for the role assignment
  assigned_at     DateTime @default(now()) @db.Timestamptz(6) /// When the role was assigned
  assigned_by     String?  @db.Uuid /// User who assigned this role
  is_active       Boolean  @default(true) /// Whether the role assignment is currently active

  // Relations
  company Company? @relation(fields: [company_id], references: [company_id], onDelete: Cascade)

  @@unique([user_id, postgresql_role, company_id])
  @@index([user_id], name: "idx_postgresql_user_roles_user_id")
  @@index([postgresql_role], name: "idx_postgresql_user_roles_role")
  @@index([company_id], name: "idx_postgresql_user_roles_company")
  @@index([is_active], name: "idx_postgresql_user_roles_active")
  @@map("postgresql_user_roles")
  @@schema("swarm-rbac")
}

// === ROLES ===
// From: prisma/schemas/swarm-rbac/roles.prisma

// === RBAC ROLES SCHEMA ===
// Core role definitions for the RBAC system

/// Role definitions for role-based access control
model Role {
  role_id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_name String @unique

  // Relations
  component_shares                 ComponentShareCompanyRole[]
  user_companies                   UserCompany[]
  role_function_permissions        RoleFunctionPermission[]
  file_shares_company_roles        FileShareCompanyRole[]
  tool_secret_shares_company_roles ToolSecretShareCompanyRole[]

  @@index([role_name], name: "idx_roles_name")
  @@map("roles")
  @@schema("swarm-rbac")
}

// === CASBIN-POLICIES ===
// From: prisma/schemas/swarm-rbac/casbin-policies.prisma

// === CASBIN POLICY SCHEMA ===
// Casbin policy storage and versioning

/// Casbin Policy Tables
model CasbinPolicy {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_policies")
  @@schema("swarm-rbac")
}

// === FUNCTION-PERMISSIONS ===
// From: prisma/schemas/swarm-rbac/function-permissions.prisma

// === FUNCTION PERMISSIONS SCHEMA ===
// Function-level permissions for granular access control

/// Function-level permissions for granular access control
model FunctionPermission {
  permission_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  function_name String   @unique /// Unique function identifier
  description   String? /// Permission description and purpose
  created_at    DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  updated_at    DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)

  // Relations
  role_function_permissions RoleFunctionPermission[]

  @@index([function_name], name: "idx_function_permissions_name")
  @@map("function_permissions")
  @@schema("swarm-rbac")
}

/// Role-to-permission mapping for RBAC system
model RoleFunctionPermission {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id       String   @db.Uuid /// Role receiving the permission
  permission_id String?  @db.Uuid /// Permission being granted
  granted_at    DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamptz(6)
  granted_by    String?  @db.Uuid /// User who granted the permission

  // Relations
  role       Role?               @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  permission FunctionPermission? @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@index([role_id], name: "idx_role_function_permissions_role")
  @@index([permission_id], name: "idx_role_function_permissions_permission")
  @@index([role_id, permission_id], name: "idx_role_function_permissions_composite")
  @@map("role_function_permissions")
  @@schema("swarm-rbac")
}

// === PRICING-TIERS ===
// From: prisma/schemas/swarm-subscriptions/pricing-tiers.prisma

// === PRICING TIERS SCHEMA ===
// Pricing tier definitions with legal document associations

/// Pricing tier definitions with currency and legal associations
model PricingTier {
  tier_id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profile_id     String    @db.Uuid
  currency       String
  price          Decimal   @db.Decimal
  yearly_price   Decimal?  @db.Decimal
  period         String
  vat_percentage Decimal?  @default(0.0) @db.Decimal
  valid_from     DateTime  @db.Timestamptz(6)
  valid_until    DateTime? @db.Timestamptz(6)
  channel        String?
  term_id        String?   @db.Uuid
  policy_id      String?   @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  pricing_profile PricingProfile?    @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  terms_condition TermsAndCondition? @relation(fields: [term_id], references: [term_id], onDelete: SetNull)
  privacy_policy  PrivacyPolicy?     @relation(fields: [policy_id], references: [policy_id], onDelete: SetNull)
  subscriptions   Subscription[]

  @@map("pricing_tiers")
  @@schema("swarm-subscriptions")
}

// === DISCOUNT-COUPONS ===
// From: prisma/schemas/swarm-subscriptions/discount-coupons.prisma

// === DISCOUNT COUPONS SCHEMA ===
// Discount coupon management and tracking

/// Discount coupon system for promotions
model DiscountCoupon {
  coupon_id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code                      String    @unique
  description               String?
  discount_type             String
  discount_value            Decimal?  @db.Decimal
  extra_tokens              Int?
  extra_database_storage_mb Int?
  extra_file_storage_mb     Int?
  currency                  String?
  valid_from                DateTime? @db.Timestamptz(6)
  valid_until               DateTime? @db.Timestamptz(6)
  max_claims                Int?
  times_claimed             Int       @default(0)
  created_at                DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  subscriptions Subscription[]

  @@map("discount_coupons")
  @@schema("swarm-subscriptions")
}

// === SUBSCRIPTIONS ===
// From: prisma/schemas/swarm-subscriptions/subscriptions.prisma

// === SUBSCRIPTIONS SCHEMA ===
// User subscription management with billing and features

/// User subscription management with billing and features
model Subscription {
  subscription_id                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                           String    @db.Uuid /// Subscriber user
  tier_id                           String    @db.Uuid /// Pricing tier
  coupon_id                         String?   @db.Uuid /// Applied discount coupon
  applied_discount_type             String? /// Type of discount applied
  applied_discount_value            Decimal?  @db.Decimal /// Discount amount
  granted_extra_tokens              Int? /// Additional tokens granted
  granted_extra_database_storage_mb Int? /// Extra database storage (MB)
  granted_extra_file_storage_mb     Int? /// Extra file storage (MB)
  start_date                        DateTime  @default(now()) @db.Timestamptz(6) /// Subscription start
  end_date                          DateTime? @db.Timestamptz(6) /// Subscription end
  status                            String    @default("active") /// Subscription status
  created_at                        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at                        DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  pricing_tier    PricingTier?    @relation(fields: [tier_id], references: [tier_id])
  discount_coupon DiscountCoupon? @relation(fields: [coupon_id], references: [coupon_id])

  @@index([user_id], name: "idx_subscriptions_user_id")
  @@index([tier_id], name: "idx_subscriptions_tier_id")
  @@index([status], name: "idx_subscriptions_status")
  @@index([end_date], name: "idx_subscriptions_end_date")
  @@index([coupon_id], name: "idx_subscriptions_coupon_id")
  @@map("subscriptions")
  @@schema("swarm-subscriptions")
}

// === PRICING-PROFILES ===
// From: prisma/schemas/swarm-subscriptions/pricing-profiles.prisma

// === PRICING PROFILES SCHEMA ===
// Pricing profile definitions and features

/// Pricing profile definitions with features and limits
model PricingProfile {
  profile_id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String
  description         String?
  features            Json?
  database_storage_mb Int?
  file_storage_mb     Int?
  token_amount        Int?
  is_pooled           Boolean?
  max_users           Int?
  created_at          DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  pricing_tiers PricingTier[]

  @@map("pricing_profiles")
  @@schema("swarm-subscriptions")
}

// === TEAMS ===
// From: prisma/schemas/swarm-team/teams.prisma

// === TEAMS SCHEMA ===
// Team management and member associations

/// Team entity for organizing agents and users
model Team {
  team_id     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String   @db.Uuid
  company_id  String?  @db.Uuid
  template_id String?  @db.Uuid
  workflow_id String?  @db.Uuid
  team_name   String
  description String?
  metadata    Json?
  is_public   Boolean? @default(false)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  company      Company?     @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  team_members TeamMember[]

  @@map("teams")
  @@schema("swarm-team")
}

/// Team member associations
model TeamMember {
  team_id  String   @db.Uuid
  agent_id String   @db.Uuid
  added_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  team  Team  @relation(fields: [team_id], references: [team_id], onDelete: Cascade)
  agent Agent @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade)

  @@id([team_id, agent_id])
  @@map("team_members")
  @@schema("swarm-team")
}

// === TOOLS ===
// From: prisma/schemas/swarm-tool/tools.prisma

// === TOOLS SCHEMA ===
// External tool integration with multi-tenant support

/// External tool integration with multi-tenant support
model Tool {
  tool_id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String /// Tool display name
  description          String? /// Tool description
  version              String? /// Current version
  cmd_run              String? /// Command to run the tool
  cmd_install          String? /// Command to install the tool
  port                 Int?     @default(autoincrement()) /// Port number for the tool
  method               String? /// Connection method (e.g., sse, stdio)
  env                  Json? /// Environment variables configuration
  status               String? /// Tool availability status
  user_id              String?  @db.Uuid /// Tool owner
  company_id           String?  @db.Uuid /// Associated company
  logo_url             String? /// Tool logo URL
  slug                 String? /// URL-friendly identifier
  website              String? /// Tool website
  developer            String? /// Tool developer/vendor
  source               String? /// Source code repository
  license              String? /// License type
  detailed_description String? /// Extended description
  security_note        String? /// Security considerations
  usage_suggestions    Json? /// Usage recommendations
  functions            Json? /// Available functions/capabilities
  is_public            Boolean? @default(false) /// Public visibility

  // Relations
  company      Company?     @relation(fields: [company_id], references: [company_id], onDelete: Cascade)
  agent_tools  AgentTool[]
  tool_secrets ToolSecret[]

  @@index([user_id], name: "idx_tools_user_id")
  @@index([company_id], name: "idx_tools_company_id")
  @@index([is_public], name: "idx_tools_is_public")
  @@index([name], name: "idx_tools_name")
  @@index([slug], name: "idx_tools_slug")
  @@index([status], name: "idx_tools_status")
  @@map("tools")
  @@schema("swarm-tool")
}

// === TOOL-SECRETS ===
// From: prisma/schemas/swarm-tool/tool-secrets.prisma

// === TOOL SECRETS SCHEMA ===
// Tool secret management and sharing

/// Tool secret management with encryption
model ToolSecret {
  secret_id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  owner_user_id          String   @db.Uuid
  tool_id                String   @db.Uuid
  vault_secret_id        String   @db.Uuid
  encrypted_secret_value String
  description            String?
  created_at             DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at             DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)

  // Relations
  tool                             Tool                         @relation(fields: [tool_id], references: [tool_id])
  tool_secret_shares_users         ToolSecretShareUser[]
  tool_secret_shares_company_roles ToolSecretShareCompanyRole[]

  @@map("tool_secrets")
  @@schema("swarm-tool")
}

/// Tool secret sharing with individual users
model ToolSecretShareUser {
  secret_id           String   @db.Uuid
  shared_with_user_id String   @db.Uuid
  granted_at          DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)

  // Relations
  tool_secret ToolSecret @relation(fields: [secret_id], references: [secret_id], onDelete: Cascade)

  @@id([secret_id, shared_with_user_id])
  @@map("tool_secret_shares_users")
  @@schema("swarm-tool")
}

/// Tool secret sharing with company roles
model ToolSecretShareCompanyRole {
  secret_id              String   @db.Uuid
  shared_with_company_id String   @db.Uuid
  shared_with_role_id    String   @db.Uuid
  granted_at             DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)

  // Relations
  tool_secret ToolSecret @relation(fields: [secret_id], references: [secret_id], onDelete: Cascade)
  company     Company    @relation(fields: [shared_with_company_id], references: [company_id], onDelete: Cascade)
  role        Role       @relation(fields: [shared_with_role_id], references: [role_id], onDelete: Cascade)

  @@id([secret_id, shared_with_company_id, shared_with_role_id])
  @@map("tool_secret_shares_company_roles")
  @@schema("swarm-tool")
}

// === VAULT ===
// From: prisma/schemas/swarm-tool/vault.prisma

// === VAULT SCHEMA ===

// Logging table for vault operations
model vault_operation_log {
  log_id         Int      @id @default(autoincrement())
  operation_type String
  key_name       String
  tool_id        String?  @db.Uuid
  version_index  Int?
  success        Boolean
  error_message  String?
  timestamp      DateTime @default(now())

  @@map("vault_operation_log")
  @@schema("swarm-tool")
}

// === USER-PROFILES ===
// From: prisma/schemas/swarm-user/user-profiles.prisma

// === USER PROFILES SCHEMA ===
// Extended user profile information and preferences

/// Extended user profile information and preferences
model UserProfile {
  user_id                  String   @id @db.Uuid /// User identifier (links to auth.users)
  full_name                String? /// User's full name
  address                  String? /// Physical address
  phone                    String? /// Contact phone number
  country                  String? /// Country of residence
  social_accounts          Json? /// Social media account links
  subscribe_newsletter     Boolean? @default(false) /// Newsletter subscription preference
  is_gdpr_compliant        Boolean? @default(false) /// GDPR compliance status
  waitlist                 Boolean? @default(false) /// Waitlist participation
  agreed_terms_id          String?  @db.Uuid /// Agreed terms and conditions version
  agreed_privacy_policy_id String?  @db.Uuid /// Agreed privacy policy version
  created_at               DateTime @default(now()) @db.Timestamptz(6)
  updated_at               DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  users_bucket     Bucket[]
  users_file       FileMetadata[]
  users_file_share FileShareUser[]

  @@index([user_id], name: "idx_user_profiles_user_id")
  @@index([country], name: "idx_user_profiles_country")
  @@index([subscribe_newsletter], name: "idx_user_profiles_newsletter")
  @@index([waitlist], name: "idx_user_profiles_waitlist")
  @@index([created_at], name: "idx_user_profiles_created_at")
  @@map("user_profiles")
  @@schema("swarm-user")
}

// === WAITLIST-POSITION-HISTORY ===
// From: prisma/schemas/swarm-waitlist/waitlist-position-history.prisma

// === WAITLIST POSITION HISTORY SCHEMA ===
// Position tracking and management for waitlist queue

/// Historical tracking of waitlist position changes
model WaitlistPositionHistory {
  position_history_id  String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  waitlist_entry_id    String                       @db.Uuid /// Foreign key to WaitlistEntry
  old_position         Int? /// Previous position (null for initial entry)
  new_position         Int /// New position in waitlist
  total_count          Int /// Total number of people in waitlist at this time
  change_reason        WaitlistPositionChangeReason /// Reason for position change
  change_description   String? /// Additional details about the change
  batch_id             String?                      @db.Uuid /// ID for bulk position updates
  admin_user_id        String?                      @db.Uuid /// Admin who made manual changes
  notification_sent    Boolean                      @default(false) /// Whether user was notified of change
  notification_sent_at DateTime?                    @db.Timestamptz(6) /// When notification was sent
  created_at           DateTime                     @default(now()) @db.Timestamptz(6)

  // Relations
  waitlist_entry WaitlistEntry @relation(fields: [waitlist_entry_id], references: [waitlist_entry_id], onDelete: Cascade)

  @@index([waitlist_entry_id], name: "idx_waitlist_position_history_entry_id")
  @@index([created_at], name: "idx_waitlist_position_history_created_at")
  @@index([change_reason], name: "idx_waitlist_position_history_reason")
  @@index([batch_id], name: "idx_waitlist_position_history_batch_id")
  @@index([notification_sent], name: "idx_waitlist_position_history_notification")
  @@map("waitlist_position_history")
  @@schema("swarm-waitlist")
}

/// Reasons for waitlist position changes
enum WaitlistPositionChangeReason {
  INITIAL_ENTRY /// First time joining waitlist
  USER_APPROVED /// User ahead was approved and removed
  USER_REJECTED /// User ahead was rejected and removed
  PRIORITY_BOOST /// Position improved due to priority scoring
  PRIORITY_PENALTY /// Position worsened due to priority scoring
  REFERRAL_BONUS /// Position improved due to referral
  ADMIN_ADJUSTMENT /// Manual adjustment by admin
  BULK_REORDER /// Bulk reordering of waitlist
  USER_WITHDREW /// User ahead withdrew from waitlist

  @@schema("swarm-waitlist")
}

/// Waitlist analytics and metrics
model WaitlistAnalytics {
  analytics_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                 DateTime @db.Date /// Date for daily analytics
  total_entries        Int      @default(0) /// Total waitlist entries
  new_entries_today    Int      @default(0) /// New entries added today
  approved_today       Int      @default(0) /// Entries approved today
  rejected_today       Int      @default(0) /// Entries rejected today
  average_wait_time    Float? /// Average wait time in days
  conversion_rate      Float? /// Approval rate percentage
  top_referral_sources Json? /// Top referral sources data
  question_responses   Json? /// Aggregated question response data
  geographic_data      Json? /// Geographic distribution data
  created_at           DateTime @default(now()) @db.Timestamptz(6)
  updated_at           DateTime @default(now()) @db.Timestamptz(6)

  @@unique([date], name: "unique_analytics_date")
  @@index([date], name: "idx_waitlist_analytics_date")
  @@index([created_at], name: "idx_waitlist_analytics_created_at")
  @@map("waitlist_analytics")
  @@schema("swarm-waitlist")
}

// === WAITLIST-QUESTIONS ===
// From: prisma/schemas/swarm-waitlist/waitlist-questions.prisma

// === WAITLIST QUESTIONS SCHEMA ===
// Dynamic question system for flexible waitlist forms

/// Dynamic questions configuration for waitlist forms
model WaitlistQuestion {
  question_id       String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question_text     String /// The question text displayed to users
  question_type     WaitlistQuestionType /// Type of input field
  is_required       Boolean              @default(false) /// Whether this question is mandatory
  display_order     Int                  @default(0) /// Order in which questions appear
  is_active         Boolean              @default(true) /// Whether question is currently active
  placeholder_text  String? /// Placeholder text for input fields
  help_text         String? /// Additional help text or instructions
  validation_rules  Json? /// JSON object with validation rules
  conditional_logic Json? /// JSON object defining when to show this question
  max_length        Int? /// Maximum character length for text inputs
  min_length        Int? /// Minimum character length for text inputs
  default_value     String? /// Default value for the question
  section_name      String? /// Group questions into sections
  created_at        DateTime             @default(now()) @db.Timestamptz(6)
  updated_at        DateTime             @default(now()) @db.Timestamptz(6)

  // Relations
  options   WaitlistQuestionOption[]
  responses WaitlistResponse[]

  @@index([is_active], name: "idx_waitlist_questions_active")
  @@index([display_order], name: "idx_waitlist_questions_order")
  @@index([question_type], name: "idx_waitlist_questions_type")
  @@index([section_name], name: "idx_waitlist_questions_section")
  @@index([created_at], name: "idx_waitlist_questions_created_at")
  @@map("waitlist_questions")
  @@schema("swarm-waitlist")
}

/// Question type enumeration for different input types
enum WaitlistQuestionType {
  TEXT /// Single line text input
  TEXTAREA /// Multi-line text input
  EMAIL /// Email input with validation
  PHONE /// Phone number input
  NUMBER /// Numeric input
  URL /// URL input with validation
  SINGLE_CHOICE /// Radio buttons (single selection)
  MULTIPLE_CHOICE /// Checkboxes (multiple selections)
  DROPDOWN /// Select dropdown
  DATE /// Date picker
  BOOLEAN /// Yes/No or True/False
  RATING /// Star rating or numeric scale
  FILE_UPLOAD /// File upload field

  @@schema("swarm-waitlist")
}

/// Options for choice-based questions (single/multiple choice, dropdown)
model WaitlistQuestionOption {
  option_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question_id       String   @db.Uuid /// Foreign key to WaitlistQuestion
  option_text       String /// Display text for the option
  option_value      String /// Value stored when selected
  display_order     Int      @default(0) /// Order in which options appear
  is_active         Boolean  @default(true) /// Whether option is currently available
  is_other_option   Boolean  @default(false) /// Whether this triggers "other" text input
  conditional_logic Json? /// JSON object for conditional display
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  question WaitlistQuestion @relation(fields: [question_id], references: [question_id], onDelete: Cascade)

  @@index([question_id], name: "idx_waitlist_question_options_question_id")
  @@index([display_order], name: "idx_waitlist_question_options_order")
  @@index([is_active], name: "idx_waitlist_question_options_active")
  @@map("waitlist_question_options")
  @@schema("swarm-waitlist")
}

// === WAITLIST-RESPONSES ===
// From: prisma/schemas/swarm-waitlist/waitlist-responses.prisma

// === WAITLIST RESPONSES SCHEMA ===
// User responses to dynamic waitlist questions

/// User responses to waitlist questions
model WaitlistResponse {
  response_id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  waitlist_entry_id   String    @db.Uuid /// Foreign key to WaitlistEntry
  question_id         String    @db.Uuid /// Foreign key to WaitlistQuestion
  response_text       String? /// Text response for text/textarea/email/phone/url questions
  response_number     Float? /// Numeric response for number/rating questions
  response_boolean    Boolean? /// Boolean response for yes/no questions
  response_date       DateTime? @db.Date /// Date response for date questions
  selected_option_ids String[] /// Array of selected option IDs for choice questions
  file_urls           String[] /// Array of file URLs for file upload questions
  other_text          String? /// Additional text when "Other" option is selected
  is_valid            Boolean   @default(true) /// Whether response passed validation
  validation_errors   Json? /// JSON array of validation error messages
  created_at          DateTime  @default(now()) @db.Timestamptz(6)
  updated_at          DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  waitlist_entry WaitlistEntry    @relation(fields: [waitlist_entry_id], references: [waitlist_entry_id], onDelete: Cascade)
  question       WaitlistQuestion @relation(fields: [question_id], references: [question_id], onDelete: Cascade)

  @@unique([waitlist_entry_id, question_id], name: "unique_entry_question_response")
  @@index([waitlist_entry_id], name: "idx_waitlist_responses_entry_id")
  @@index([question_id], name: "idx_waitlist_responses_question_id")
  @@index([is_valid], name: "idx_waitlist_responses_valid")
  @@index([created_at], name: "idx_waitlist_responses_created_at")
  @@map("waitlist_responses")
  @@schema("swarm-waitlist")
}

// === WAITLIST-SETTINGS ===
// From: prisma/schemas/swarm-waitlist/waitlist-settings.prisma

// === WAITLIST SETTINGS SCHEMA ===
// Configuration and settings for waitlist management

/// Global waitlist configuration and settings
model WaitlistSettings {
  settings_id      String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  setting_key      String              @unique /// Unique setting identifier
  setting_value    String /// Setting value (JSON string for complex values)
  setting_type     WaitlistSettingType /// Type of setting value
  description      String? /// Human-readable description of setting
  is_public        Boolean             @default(false) /// Whether setting is visible to users
  is_editable      Boolean             @default(true) /// Whether setting can be modified
  validation_rules Json? /// JSON object with validation rules
  default_value    String? /// Default value for the setting
  category         String? /// Setting category for organization
  created_at       DateTime            @default(now()) @db.Timestamptz(6)
  updated_at       DateTime            @default(now()) @db.Timestamptz(6)

  @@index([setting_key], name: "idx_waitlist_settings_key")
  @@index([category], name: "idx_waitlist_settings_category")
  @@index([is_public], name: "idx_waitlist_settings_public")
  @@map("waitlist_settings")
  @@schema("swarm-waitlist")
}

/// Setting value types
enum WaitlistSettingType {
  STRING /// Text string
  NUMBER /// Numeric value
  BOOLEAN /// True/false value
  JSON /// JSON object
  EMAIL /// Email address
  URL /// Website URL
  DATE /// Date value
  TIME /// Time value

  @@schema("swarm-waitlist")
}

/// Waitlist campaigns for different product launches or features
model WaitlistCampaign {
  campaign_id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String /// Campaign name
  slug                 String    @unique /// URL-friendly campaign identifier
  description          String? /// Campaign description
  start_date           DateTime? @db.Timestamptz(6) /// Campaign start date
  end_date             DateTime? @db.Timestamptz(6) /// Campaign end date
  is_active            Boolean   @default(true) /// Whether campaign is currently active
  max_entries          Int? /// Maximum number of entries allowed
  priority_multiplier  Float     @default(1.0) /// Priority scoring multiplier
  custom_questions     String[] /// Array of question IDs specific to this campaign
  landing_page_url     String? /// Custom landing page URL
  success_redirect_url String? /// Redirect URL after successful signup
  email_templates      Json? /// Custom email templates for this campaign
  metadata             Json? /// Additional campaign metadata
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  entries WaitlistCampaignEntry[]

  @@index([slug], name: "idx_waitlist_campaigns_slug")
  @@index([is_active], name: "idx_waitlist_campaigns_active")
  @@index([start_date], name: "idx_waitlist_campaigns_start_date")
  @@index([end_date], name: "idx_waitlist_campaigns_end_date")
  @@map("waitlist_campaigns")
  @@schema("swarm-waitlist")
}

/// Junction table linking waitlist entries to campaigns
model WaitlistCampaignEntry {
  campaign_entry_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id       String   @db.Uuid /// Foreign key to WaitlistCampaign
  waitlist_entry_id String   @db.Uuid /// Foreign key to WaitlistEntry
  joined_at         DateTime @default(now()) @db.Timestamptz(6)
  campaign_metadata Json? /// Campaign-specific metadata for this entry

  // Relations
  campaign       WaitlistCampaign @relation(fields: [campaign_id], references: [campaign_id], onDelete: Cascade)
  waitlist_entry WaitlistEntry    @relation(fields: [waitlist_entry_id], references: [waitlist_entry_id], onDelete: Cascade)

  @@unique([campaign_id, waitlist_entry_id], name: "unique_campaign_entry")
  @@index([campaign_id], name: "idx_waitlist_campaign_entries_campaign_id")
  @@index([waitlist_entry_id], name: "idx_waitlist_campaign_entries_entry_id")
  @@index([joined_at], name: "idx_waitlist_campaign_entries_joined_at")
  @@map("waitlist_campaign_entries")
  @@schema("swarm-waitlist")
}

// === WAITLIST-ENTRIES ===
// From: prisma/schemas/swarm-waitlist/waitlist-entries.prisma

// === WAITLIST ENTRIES SCHEMA ===
// Main waitlist registration and user management

/// Main waitlist registration entry linking to user profiles
model WaitlistEntry {
  waitlist_entry_id String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String         @db.Uuid /// Links to auth.users table
  email             String /// User email address (for non-authenticated users)
  name              String /// User's full name
  company           String? /// Optional company name
  position          Int            @default(0) /// Current position in waitlist
  total_users_ahead Int            @default(0) /// Number of users ahead in queue
  status            WaitlistStatus @default(PENDING) /// Current waitlist status
  priority_score    Int            @default(0) /// Priority scoring for queue management
  referral_code     String? /// Optional referral code used
  utm_source        String? /// Marketing attribution source
  utm_medium        String? /// Marketing attribution medium
  utm_campaign      String? /// Marketing attribution campaign
  ip_address        String? /// IP address for duplicate detection
  user_agent        String? /// Browser user agent
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @db.Timestamptz(6)
  approved_at       DateTime?      @db.Timestamptz(6) /// When user was approved
  notified_at       DateTime?      @db.Timestamptz(6) /// When user was notified of approval

  // Relations
  responses        WaitlistResponse[]
  position_history WaitlistPositionHistory[]
  campaign_entries WaitlistCampaignEntry[]

  @@unique([email], name: "unique_waitlist_email")
  @@unique([user_id], name: "unique_waitlist_user")
  @@index([user_id], name: "idx_waitlist_entries_user_id")
  @@index([email], name: "idx_waitlist_entries_email")
  @@index([status], name: "idx_waitlist_entries_status")
  @@index([position], name: "idx_waitlist_entries_position")
  @@index([created_at], name: "idx_waitlist_entries_created_at")
  @@index([priority_score], name: "idx_waitlist_entries_priority_score")
  @@index([referral_code], name: "idx_waitlist_entries_referral_code")
  @@map("waitlist_entries")
  @@schema("swarm-waitlist")
}

/// Waitlist status enumeration
enum WaitlistStatus {
  PENDING /// Waiting for approval
  APPROVED /// Approved for access
  REJECTED /// Application rejected
  INVITED /// Invitation sent
  ACTIVATED /// User has activated account
  SUSPENDED /// Temporarily suspended

  @@schema("swarm-waitlist")
}

// === WEBHOOKS ===
// From: prisma/schemas/swarm-webhook/webhooks.prisma

// === WEBHOOKS SCHEMA ===
// Webhook management for incoming and outgoing integrations

/// Outgoing webhook configurations
model OutgoingWebhook {
  webhook_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String   @db.Uuid
  company_id String?  @db.Uuid
  name       String
  url        String
  headers    Json?
  enabled    Boolean? @default(true)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  company Company? @relation(fields: [company_id], references: [company_id], onDelete: Cascade)

  @@map("outgoing_webhooks")
  @@schema("swarm-webhook")
}

/// Incoming webhook configurations
model Webhook {
  webhook_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String   @db.Uuid
  company_id     String?  @db.Uuid
  name           String
  description    String?
  endpoint_path  String   @unique
  secret_token   String?
  target_type    String
  target_id      String?  @db.Uuid
  webhook_config Json?    @default("{}")
  is_active      Boolean? @default(true)
  is_public      Boolean? @default(false)
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  company Company? @relation(fields: [company_id], references: [company_id], onDelete: SetNull)

  @@map("webhooks")
  @@schema("swarm-webhook")
}

// === WORKFLOW-TYPES ===
// From: prisma/schemas/swarm-workflow/workflow-types.prisma

// === WORKFLOW TYPES SCHEMA ===
// Workflow type definitions and categorization

/// Workflow type definitions
model WorkflowType {
  type_id     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type_name   String   @unique
  description String?
  metadata    Json?
  logo_url    String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  workflows Workflow[]

  @@map("types")
  @@schema("swarm-workflow")
}

// === WORKFLOWS ===
// From: prisma/schemas/swarm-workflow/workflows.prisma

// === WORKFLOWS SCHEMA ===
// Workflow automation and process definition

/// Workflow automation and process definition
model Workflow {
  workflow_id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id             String?  @db.Uuid /// Workflow owner
  company_id          String?  @db.Uuid /// Associated company
  workflow_type_id    String?  @db.Uuid /// Workflow type classification
  description         String? /// Workflow description
  workflow_name       String /// Workflow display name
  workflow_definition Json /// Workflow configuration and steps
  version             Int?     @default(1) /// Workflow version number
  metadata            Json? /// Additional workflow metadata
  status              String?  @default("active") /// Workflow status (active/inactive/draft)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  is_public           Boolean? @default(false) /// Public visibility
  template_id         String?  @db.Uuid /// Base template used

  // Relations
  company       Company?      @relation(fields: [company_id], references: [company_id])
  workflow_type WorkflowType? @relation(fields: [workflow_type_id], references: [type_id])

  @@index([user_id], name: "idx_workflows_user_id")
  @@index([company_id], name: "idx_workflows_company_id")
  @@index([is_public], name: "idx_workflows_is_public")
  @@index([status], name: "idx_workflows_status")
  @@index([created_at], name: "idx_workflows_created_at")
  @@index([workflow_name], name: "idx_workflows_name")
  @@map("workflows")
  @@schema("swarm-workflow")
}
